import logging
import asyncio
import requests
import os
import psycopg2
from urllib.parse import urlparse
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from bs4 import BeautifulSoup
from dotenv import load_dotenv
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
DB_PARAMS = {
    "dbname": os.getenv("DB_NAME"),
    "user": os.getenv("DB_USER"),
    "password": os.getenv("DB_PASSWORD"),
    "host": os.getenv("DB_HOST")
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
def test_connection():
    try:
        conn = psycopg2.connect(**DB_PARAMS)
        cur = conn.cursor()
        cur.execute("SELECT version();")
        db_version = cur.fetchone()
        print(f"–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: {db_version}")
        cur.close()
        conn.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

test_connection()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞
TOKEN = "–¢–æ–∫–µ–Ω –±–æ—Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞–º"
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# RSS-–∏—Å—Ç–æ—á–Ω–∏–∫–∏
NEWS_SOURCES = {
    "Kommersant": "https://www.kommersant.ru/RSS/news.xml",
    "IXBT": "https://www.ixbt.com/export/news.rss",
    "Investing": "https://ru.investing.com/rss/news.rss",
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
def main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"), KeyboardButton(text="üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏")]
        ],
        resize_keyboard=True
    )

# –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
class UserState(StatesGroup):
    choosing_subscription = State()
    choosing_news = State()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard())

# –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
def fetch_rss_news(url):
    response = requests.get(url)
    if response.status_code != 200:
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π."

    soup = BeautifulSoup(response.content, "xml")
    items = soup.find_all("item", limit=3)  # –ë–µ—Ä–µ–º 3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–∏
    news_list = [f"üîπ {item.title.text}\nüîó {urlparse(item.link.text).netloc}" for item in items]

    return "\n\n".join(news_list) if news_list else "–ù–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ë–î
def add_subscription(user_id, source):
    conn = psycopg2.connect(**DB_PARAMS)
    cur = conn.cursor()
    cur.execute(
        "INSERT INTO subscriptions (user_id, source) VALUES (%s, %s) "
        "ON CONFLICT (user_id) DO UPDATE SET source = EXCLUDED.source;",
        (user_id, source)
    )
    conn.commit()
    cur.close()
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
@dp.message(F.text == "üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")
async def subscribe_cmd(message: types.Message, state: FSMContext):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì¢ Kommersant"), KeyboardButton(text="üñ• IXBT")],
            [KeyboardButton(text="üìä Investing"), KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await state.set_state(UserState.choosing_subscription)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.message(UserState.choosing_subscription, F.text.in_(["üì¢ Kommersant", "üñ• IXBT", "üìä Investing"]))
async def confirm_subscription(message: types.Message, state: FSMContext):
    source_map = {
        "üì¢ Kommersant": "Kommersant",
        "üñ• IXBT": "IXBT",
        "üìä Investing": "Investing"
    }

    source = source_map[message.text]
    add_subscription(message.from_user.id, source)
    await message.answer(f"–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {source}! –†–∞–∑ –≤ —Å—É—Ç–∫–∏ –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–æ–≤–∞—è —Å—Ç–∞—Ç—å—è.", reply_markup=main_keyboard())
    await state.clear()  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"
@dp.message(F.text == "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏")
async def latest_news_cmd(message: types.Message, state: FSMContext):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì¢ Kommersant"), KeyboardButton(text="üñ• IXBT")],
            [KeyboardButton(text="üìä Investing"), KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await state.set_state(UserState.choosing_news)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
@dp.message(UserState.choosing_news, F.text.in_(["üì¢ Kommersant", "üñ• IXBT", "üìä Investing"]))
async def show_latest_news(message: types.Message, state: FSMContext):
    source_map = {
        "üì¢ Kommersant": "Kommersant",
        "üñ• IXBT": "IXBT",
        "üìä Investing": "Investing"
    }

    source = source_map[message.text]
    news = fetch_rss_news(NEWS_SOURCES[source])
    await message.answer(f"üì∞ –ù–æ–≤–æ—Å—Ç–∏ {source}:\n\n{news}", reply_markup=main_keyboard())
    await state.clear()  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üîô –ù–∞–∑–∞–¥"
@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_keyboard())

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
def get_subscriptions():
    conn = psycopg2.connect(**DB_PARAMS)
    cur = conn.cursor()
    cur.execute("SELECT user_id, source FROM subscriptions")
    subscriptions = cur.fetchall()
    cur.close()
    conn.close()
    return subscriptions

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
async def send_daily_news():
    subscriptions = get_subscriptions()
    for user_id, source in subscriptions:
        news = fetch_rss_news(NEWS_SOURCES[source])
        if news:
            await bot.send_message(user_id, news)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = AsyncIOScheduler()
scheduler.add_job(send_daily_news, "interval", hours=24)  # –†–∞–∑ –≤ —Å—É—Ç–∫–∏

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    scheduler.start()
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())